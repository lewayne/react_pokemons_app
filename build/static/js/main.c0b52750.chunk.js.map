{"version":3,"sources":["services/authentication-service.ts","pages/login.tsx","pages/page-not-found.tsx","helpers/formatSomthing.tsx","models/mock-pokemon.ts","services/pokemon-service.ts","components/pokemon-form.tsx","models/pokemons.ts","pages/pokemon-add.tsx","components/loader.tsx","pages/pokemon-detail.tsx","pages/pokemon-edit.tsx","components/pokemon-card.tsx","components/pokemon-search.tsx","pages/Pokemon-list.tsx","PrivateRoute.tsx","App.tsx","index.tsx"],"names":["AuthenticationService","username","password","isAuthenticated","Promise","resolve","setTimeout","Login","history","useHistory","useState","value","form","setForm","message","setMessage","handleInputChange","e","fieldName","target","name","fieldValue","newField","handleSubmit","preventDefault","newForm","length","error","isValid","validateForm","login","then","push","onSubmit","className","htmlFor","id","type","onChange","PageNotFound","src","alt","to","formatType","color","formatDate","date","Date","getDate","getMonth","getFullYear","POKEMONS","hp","cp","picture","types","created","PokemonService","this","isDev","fetch","response","json","catch","handleError","pokemons","data","isEmpty","foundPokemon","find","pokemon","method","body","JSON","stringify","headers","index","findIndex","filter","term","includes","Object","keys","console","process","PokemonForm","isEditForm","hasType","handleForm","addPokemon","updatePokemon","isAddForm","startsWith","endsWith","test","isTypesValid","log","style","width","margin","onClick","deletePokemon","map","key","marginBottom","disabled","checked","newTypes","concat","currentType","selectType","Pokemon","PokemonAdd","getTime","Loader","PokemonsDetail","match","setPokemon","useEffect","getPokemon","params","PokemonEdit","PokemonCard","borderColor","setColor","onMouseEnter","onMouseLeave","PokemonSearch","setTerm","setPokemons","placeholder","searchPokemon","PokemonList","getPokemons","position","bottom","right","PrivateRoute","Component","component","rest","render","props","pathname","App","exact","path","ReactDom","document","getElementById"],"mappings":"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","file":"static/js/main.c0b52750.chunk.js","sourcesContent":[" \r\nexport default class AuthenticationService {\r\n    static isAuthenticated: boolean = false;\r\n\r\n    static login(username: string, password: string): Promise<boolean>{\r\n        const isAuthenticated = (username === 'lewayne' && password === 'lewayne');\r\n\r\n        return new Promise(resolve=> {\r\n            setTimeout(() => {\r\n                this.isAuthenticated = isAuthenticated;\r\n                resolve(isAuthenticated);\r\n            });\r\n        })\r\n    }\r\n}","import React, { FunctionComponent, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport AuthenticationService from '../services/authentication-service';\r\n\r\ntype Field = {\r\n    value?: any,\r\n    error?: string,\r\n    isValid?: boolean\r\n};\r\n\r\ntype Form = {\r\n    username: Field,\r\n    password: Field\r\n}\r\n\r\nconst Login: FunctionComponent = () => { \r\n    const history = useHistory();\r\n\r\n    const [form, setForm] = useState<Form>({\r\n        username: { value: '' },\r\n        password: { value: '' },\r\n    });\r\n\r\n    const [message, setMessage] = useState<string>('Vous êtes déconnecté. (lewayne / lewayne)');\r\n\r\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n        const fieldName: string = e.target.name;\r\n        const fieldValue: string = e.target.value;\r\n        const newField: Field = { [fieldName]: { value: fieldValue } };\r\n\r\n        setForm({ ...form, ...newField });\r\n    }\r\n\r\n    const validateForm = () => {\r\n        let newForm: Form = form;\r\n\r\n        // Validator username\r\n        if (form.username.value.length < 3) {\r\n            const errorMsg: string = 'Votre prénom doit faire au moins 3 caractères de long.';\r\n            const newField: Field = { value: form.username.value, error: errorMsg, isValid: false };\r\n            newForm = { ...newForm, ...{ username: newField } };\r\n        } else {\r\n            const newField: Field = { value: form.username.value, error: '', isValid: true };\r\n            newForm = { ...newForm, ...{ username: newField } };\r\n        }\r\n\r\n        // Validator password\r\n        if (form.password.value.length < 6) {\r\n            const errorMsg: string = 'Votre mot de passe doit faire au moins 6 caractères de long.';\r\n            const newField: Field = { value: form.password.value, error: errorMsg, isValid: false };\r\n            newForm = { ...newForm, ...{ password: newField } };\r\n        } else {\r\n            const newField: Field = { value: form.password.value, error: '', isValid: true };\r\n            newForm = { ...newForm, ...{ password: newField } };\r\n        }\r\n\r\n        setForm(newForm);\r\n\r\n        return newForm.username.isValid && newForm.password.isValid;\r\n    }\r\n\r\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n        const isFormValid = validateForm();\r\n        if (isFormValid) {\r\n            setMessage('👉 Tentative de connexion en cours ...');\r\n            AuthenticationService.login(form.username.value, form.password.value).then(isAuthenticated => {\r\n                if (!isAuthenticated) {\r\n                    setMessage('🔐 Identifiant ou mot de passe incorrect.');\r\n                    return;\r\n                }\r\n\r\n                history.push('/pokemons'); \r\n            });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={(e) => handleSubmit(e)}>\r\n            <div className=\"row\">\r\n                <div className=\"col s12 m8 offset-m2\">\r\n                    <div className=\"card hoverable\">\r\n                        <div className=\"card-stacked\">\r\n                            <div className=\"card-content\">\r\n                                {/* Form message */}\r\n                                {message && <div className=\"form-group\">\r\n                                    <div className=\"card-panel grey lighten-5\">\r\n                                        {message}\r\n                                    </div>\r\n                                </div>}\r\n                                {/* Field username */}\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"username\">Identifiant</label>\r\n                                    <input id=\"username\" type=\"text\" name=\"username\" className=\"form-control\" value={form.username.value} onChange={e => handleInputChange(e)}></input>\r\n                                    {/* error */}\r\n                                    {form.username.error &&\r\n                                        <div className=\"card-panel red accent-1\">\r\n                                            {form.username.error}\r\n                                        </div>}\r\n                                </div>\r\n                                {/* Field password */}\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"password\">Mot de passe</label>\r\n                                    <input id=\"password\" type=\"password\" name=\"password\" className=\"form-control\" value={form.password.value} onChange={e => handleInputChange(e)}></input>\r\n                                    {/* error */}\r\n                                    {form.password.error &&\r\n                                        <div className=\"card-panel red accent-1\">\r\n                                            {form.password.error}\r\n                                        </div>}\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"card-action center\">\r\n                                {/* Submit button */}\r\n                                <button type=\"submit\" className=\"btn\">Valider</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default Login;","import React, { FunctionComponent } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n  \r\nconst PageNotFound: FunctionComponent = () => {\r\n  \r\n  return (\r\n    <div className=\"center\">\r\n      <img src=\"http://assets.pokemon.com/assets/cms2/img/pokedex/full/035.png\" alt=\"Page non trouvée\"/>\r\n      <h1>Hey, cette page n'existe pas !</h1> \r\n      <Link to=\"/\" className=\"waves-effect waves-teal btn-flat\">\r\n        Retourner à l'accueil\r\n      </Link>\r\n    </div>\r\n  );\r\n}\r\n  \r\nexport default PageNotFound; ","export const formatType = (type: string): string => {\r\n    let color: string;\r\n\r\n    switch (type) {\r\n        case 'Feu':  color = 'red lighten-1';   break;\r\n        case 'Eau':     color = 'blue lighten-1';      break;\r\n        case 'Plante':     color = 'green lighten-1';      break;\r\n        case 'Insecte':\r\n            color = 'brown lighten-1';\r\n            break;\r\n        case 'Normal':\r\n            color = 'grey lighten-3';\r\n            break;\r\n        case 'Vol':\r\n            color = 'blue lighten-3';\r\n            break;\r\n        case 'Poison':\r\n            color = 'deep-purple accent-1';\r\n            break;\r\n        case 'Fée':\r\n            color = 'pink lighten-4';\r\n            break;\r\n        case 'Psy':\r\n            color = 'deep-purple darken-2';\r\n            break;\r\n        case 'Electrik':\r\n            color = 'lime accent-1';\r\n            break;\r\n        case 'Combat':\r\n            color = 'deep-orange';\r\n            break;\r\n        default:\r\n            color = 'grey';\r\n            break;\r\n    }\r\n\r\n    return `chip ${color}`;\r\n}\r\n\r\nexport const formatDate = (date: Date = new Date()): string => {\r\n    return `${date.getDate()}/${date.getMonth()+1} /${date.getFullYear()}`\r\n}","import Pokemon from \"./pokemons\";\r\n\r\nexport const POKEMONS: Pokemon[] = [\r\n  {\r\n    id: 1,\r\n    name: \"Bulbizarre\",\r\n    hp: 25,\r\n    cp: 5,\r\n    picture:\r\n      \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/001.png\",\r\n    types: [\"Plante\", \"Poison\"],\r\n    created: new Date(),\r\n  },\r\n  {\r\n    id: 2,\r\n    name: \"Salamèche\",\r\n    hp: 28,\r\n    cp: 6,\r\n    picture:\r\n      \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/004.png\",\r\n    types: [\"Feu\"],\r\n    created: new Date(),\r\n  },\r\n  {\r\n    id: 3,\r\n    name: \"Carapuce\",\r\n    hp: 21,\r\n    cp: 4,\r\n    picture:\r\n      \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/007.png\",\r\n    types: [\"Eau\"],\r\n    created: new Date(),\r\n  },\r\n  {\r\n    id: 4,\r\n    name: \"Aspicot\",\r\n    hp: 16,\r\n    cp: 2,\r\n    picture:\r\n      \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/013.png\",\r\n    types: [\"Insecte\", \"Poison\"],\r\n    created: new Date(),\r\n  },\r\n  {\r\n    id: 5,\r\n    name: \"Roucool\",\r\n    hp: 30,\r\n    cp: 7,\r\n    picture:\r\n      \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/016.png\",\r\n    types: [\"Normal\", \"Vol\"],\r\n    created: new Date(),\r\n  },\r\n  {\r\n    id: 6,\r\n    name: \"Rattata\",\r\n    hp: 18,\r\n    cp: 6,\r\n    picture:\r\n      \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/019.png\",\r\n    types: [\"Normal\"],\r\n    created: new Date(),\r\n  },\r\n  {\r\n    id: 7,\r\n    name: \"Piafabec\",\r\n    hp: 14,\r\n    cp: 5,\r\n    picture:\r\n      \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/021.png\",\r\n    types: [\"Normal\", \"Vol\"],\r\n    created: new Date(),\r\n  },\r\n  {\r\n    id: 8,\r\n    name: \"Abo\",\r\n    hp: 16,\r\n    cp: 4,\r\n    picture:\r\n      \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/023.png\",\r\n    types: [\"Poison\"],\r\n    created: new Date(),\r\n  },\r\n  {\r\n    id: 9,\r\n    name: \"Pikachu\",\r\n    hp: 21,\r\n    cp: 7,\r\n    picture:\r\n      \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/025.png\",\r\n    types: [\"Electrik\"],\r\n    created: new Date(),\r\n  },\r\n  {\r\n    id: 10,\r\n    name: \"Sabelette\",\r\n    hp: 19,\r\n    cp: 3,\r\n    picture:\r\n      \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/027.png\",\r\n    types: [\"Normal\"],\r\n    created: new Date(),\r\n  },\r\n  {\r\n    id: 11,\r\n    name: \"Mélofée\",\r\n    hp: 25,\r\n    cp: 5,\r\n    picture:\r\n      \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/035.png\",\r\n    types: [\"Fée\"],\r\n    created: new Date(),\r\n  },\r\n  {\r\n    id: 12,\r\n    name: \"Groupix\",\r\n    hp: 17,\r\n    cp: 8,\r\n    picture:\r\n      \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/037.png\",\r\n    types: [\"Feu\"],\r\n    created: new Date(),\r\n  },\r\n];\r\n\r\nexport default POKEMONS;\r\n","/* Version de PRODUCTION */\r\nimport Pokemon from \"../models/pokemons\";\r\nimport POKEMONS from \"../models/mock-pokemon\";\r\n  \r\nexport default class PokemonService {\r\n  \r\n  static pokemons:Pokemon[] = POKEMONS;\r\n  \r\n  static isDev = (!process.env.NODE_ENV || process.env.NODE_ENV === 'development');\r\n  \r\n  static getPokemons(): Promise<Pokemon[]> {\r\n    if(this.isDev) {\r\n      return fetch('http://localhost:3001/pokemons')\r\n      .then(response => response.json())\r\n      .catch(error => this.handleError(error));\r\n    }\r\n  \r\n    return new Promise(resolve => {\r\n      resolve(this.pokemons);\r\n    });\r\n  }\r\n  \r\n  static getPokemon(id: number): Promise<Pokemon|null > {\r\n    if(this.isDev) {\r\n      return fetch(`http://localhost:3001/pokemons/${id}`)\r\n      .then(response => response.json())\r\n      .then(data => this.isEmpty(data) ? null : data)\r\n      .catch(error => this.handleError(error));\r\n    }\r\n  \r\n    return new Promise(resolve => {    \r\n      const foundPokemon = this.pokemons.find((pokemon) => id === pokemon.id);\r\n      if (foundPokemon) resolve(foundPokemon);\r\n    }); \r\n  }\r\n  \r\n  static updatePokemon(pokemon: Pokemon): Promise<Pokemon> {\r\n    if(this.isDev) {\r\n      return fetch(`http://localhost:3001/pokemons/${pokemon.id}`, {\r\n        method: 'PUT',\r\n        body: JSON.stringify(pokemon),\r\n        headers: { 'Content-Type': 'application/json'}\r\n      })\r\n      .then(response => response.json())\r\n      .catch(error => this.handleError(error));\r\n    }\r\n  \r\n    return new Promise(resolve => {\r\n      const { id } = pokemon;\r\n      const index = this.pokemons.findIndex(pokemon => pokemon.id === id);\r\n      this.pokemons[index] = pokemon;\r\n      resolve(pokemon);\r\n    }); \r\n  }\r\n  \r\n  static deletePokemon(pokemon: Pokemon): Promise<{}> {\r\n    if(this.isDev) {\r\n      return fetch(`http://localhost:3001/pokemons/${pokemon.id}`, {\r\n        method: 'DELETE',\r\n        headers: { 'Content-Type': 'application/json'}\r\n      })\r\n      .then(response => response.json())\r\n      .catch(error => this.handleError(error));\r\n    }\r\n  \r\n    return new Promise(resolve => {    \r\n      const { id } = pokemon;\r\n      this.pokemons = this.pokemons.filter(pokemon => pokemon.id !== id);\r\n      resolve({});\r\n    }); \r\n  }\r\n  \r\n  static addPokemon(pokemon: Pokemon): Promise<Pokemon> {\r\n    pokemon.created = new Date(pokemon.created ? pokemon.created : 1);\r\n  \r\n    if(this.isDev) {\r\n      return fetch(`http://localhost:3001/pokemons`, {\r\n        method: 'POST',\r\n        body: JSON.stringify(pokemon),\r\n        headers: { 'Content-Type': 'application/json'}\r\n      })\r\n      .then(response => response.json())\r\n      .catch(error => this.handleError(error));\r\n    }\r\n  \r\n    return new Promise(resolve => {    \r\n      this.pokemons.push(pokemon);\r\n      resolve(pokemon);\r\n    }); \r\n  }\r\n  \r\n  static searchPokemon(term: string): Promise<Pokemon[]> {\r\n    if(this.isDev) {\r\n      return fetch(`http://localhost:3001/pokemons?q=${term}`)\r\n      .then(response => response.json())\r\n      .catch(error => this.handleError(error));\r\n    }\r\n  \r\n    return new Promise(resolve => {    \r\n      const results = this.pokemons.filter(pokemon => pokemon.name.includes(term));\r\n      resolve(results);\r\n    });\r\n  \r\n  }\r\n  \r\n  static isEmpty(data: Object): boolean {\r\n    return Object.keys(data).length === 0;\r\n  }\r\n  \r\n  static handleError(error: Error): void {\r\n    console.error(error);\r\n  }\r\n}\r\n\r\n\r\n/*import Pokemon from \"../models/pokemons\";\r\n\r\nexport default class PokemonService {\r\n  static async getPokemons(): Promise<Pokemon[]> {\r\n    return await fetch(\"http://localhost:3001/pokemons\")\r\n      .then((response) => response.json())\r\n      .catch((error) => this.handleError(error));\r\n  }\r\n\r\n  static async getPokemon(id: number): Promise<Pokemon | null> {\r\n    return await fetch(`http://localhost:3001/pokemons/${id}`)\r\n      .then((response) => response.json())\r\n      .then((data) => (this.isEmpty(data) ? null : data))\r\n      .catch((error) => this.handleError(error));\r\n  }\r\n\r\n  static async updatePokemon(pokemon: Pokemon): Promise<Pokemon> {\r\n    return await fetch(`http://localhost:3001/pokemons/${pokemon.id}`, {\r\n      method: \"PUT\",\r\n      body: JSON.stringify(pokemon),\r\n      headers: { \"Content-type\": \"application/json\" },\r\n    })\r\n      .then((response) => response.json())\r\n      .catch((error) => this.handleError(error));\r\n  }\r\n\r\n  static async deletePokemon(pokemon: Pokemon): Promise<{}> {\r\n    return await fetch(`http://localhost:3001/pokemons/${pokemon.id}`, {\r\n      method: \"DELETE\",\r\n      headers: { \"Content-type\": \"application/json\" },\r\n    })\r\n      .then((response) => response.json())\r\n      .catch((error) => this.handleError(error));\r\n  }\r\n\r\n  static async addPokemon(pokemon: Pokemon): Promise<Pokemon> {\r\n    delete pokemon.created;\r\n\r\n    return await fetch(`http://localhost:3001/pokemons`, {\r\n      method: \"POST\",\r\n      body: JSON.stringify(pokemon),\r\n      headers: { \"Content-type\": \"application/json\" },\r\n    })\r\n      .then((response) => response.json())\r\n      .catch((error) => this.handleError(error));\r\n  }\r\n\r\n  static async searchPokemon(term: string): Promise<Pokemon[]> { \r\n    return await fetch(`http://localhost:3001/pokemons?q=${term}`)\r\n      .then((response) => response.json())\r\n      .catch((error) => this.handleError(error));\r\n  }\r\n\r\n  static isEmpty(data: Object): boolean {\r\n    return Object.keys(data).length === 0;\r\n  }\r\n\r\n  static handleError(error: Error): void {\r\n    console.error(error);\r\n  }\r\n}*/","import React, { FunctionComponent, useState } from 'react'; \r\nimport { useHistory } from 'react-router-dom';\r\nimport { formatType } from '../helpers/formatSomthing';\r\nimport Pokemon from '../models/pokemons';\r\nimport PokemonService from '../services/pokemon-service';\r\n\r\ntype Props = {\r\n    pokemon: Pokemon,\r\n    isEditForm : boolean\r\n};\r\n\r\ntype Field = {\r\n    value : any,\r\n    error?: string,\r\n    isValid?:boolean\r\n}\r\n\r\ntype Form = {\r\n    name: Field,\r\n    hp: Field,\r\n    cp: Field,\r\n    types: Field,\r\n    picture: Field\r\n}\r\n\r\nconst PokemonForm: FunctionComponent<Props> = ({ pokemon, isEditForm}) => {\r\n    const [form, setForm] = useState<Form>({\r\n        picture: { value: pokemon.picture},\r\n        name: {value:pokemon.name, isValid: true},\r\n        hp: { value: pokemon.hp, isValid: true },\r\n        cp: { value: pokemon.cp, isValid: true },\r\n        types: { value: pokemon.types, isValid: true },\r\n\r\n    })\r\n\r\n    const history = useHistory();\r\n\r\n    const types: string[] = [\r\n        'Plante', 'Feu', 'Eau', 'Insecte', 'Normal', 'Electrik',\r\n        'Poison', 'Fée', 'Vol', 'Combat', 'Psy'\r\n    ];\r\n\r\n    const hasType = (type: string): boolean => {\r\n        return form.types.value.includes(type)\r\n    }\r\n\r\n    const handleForm = (e:React.ChangeEvent<HTMLInputElement>) => {\r\n        setForm({ ...form, [e.target.name]: { value: e.target.value } })\r\n        // OR setForm({ ...form, ...{ [e.target.name]: { value: e.target.value } } })\r\n\r\n    }\r\n\r\n    const selectType = (type: string, e: React.ChangeEvent<HTMLInputElement>) : void => {\r\n        const checked = e.target.checked; \r\n        if(checked){\r\n            // alors on ajoute à la liste des types de pokemons\r\n            const newTypes : string[] = form.types.value.concat([type]);\r\n            setForm({\r\n                ...form, types: {value: newTypes}\r\n            });\r\n        }\r\n        else{\r\n            //si on retire\r\n            const newTypes: string[] = form.types.value.filter((currentType: string) => currentType !== type);\r\n            setForm({\r\n                ...form, types: { value: newTypes }\r\n            });\r\n        }\r\n    }\r\n\r\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n        const isValidForm = validateForm();\r\n        if(isValidForm) {\r\n            console.log(form);\r\n            pokemon.picture = form.picture.value;\r\n            pokemon.name = form.name.value;\r\n            pokemon.hp = form.hp.value;\r\n            pokemon.cp = form.cp.value;\r\n            pokemon.types = form.types.value; \r\n        }\r\n\r\n       (isEditForm) ? updatePokemon() : addPokemon();     \r\n    }\r\n\r\n    const addPokemon = () => {\r\n        PokemonService.addPokemon(pokemon).then(() => history.push('/pokemons'))\r\n    }\r\n    const updatePokemon = () => {\r\n        PokemonService.updatePokemon(pokemon).then(() => history.push(`/pokemon/${pokemon.id}`));\r\n    }\r\n\r\n    const isAddForm = () => {\r\n        return !isEditForm;\r\n    }\r\n\r\n    const validateForm = () => {\r\n        let newForm: Form = form;\r\n\r\n        // Validator url\r\n        if (isAddForm()) { \r\n            const start = \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/\";\r\n            const end = \".png\";\r\n\r\n            if (!form.picture.value.startsWith(start) || !form.picture.value.endsWith(end)) {\r\n                const errorMsg: string = 'L\\'url n\\'est pas valide.';\r\n                const newField: Field = { value: form.picture.value, error: errorMsg, isValid: false };\r\n                newForm = { ...newForm, ...{ picture: newField } };\r\n            } \r\n            else {\r\n                const newField: Field = { value: form.picture.value, error: '', isValid: true };\r\n                newForm = { ...newForm, ...{ picture: newField } };\r\n            }\r\n        } \r\n\r\n       \r\n        // Validator name\r\n        if (!/^[a-zA-Zàéè ]{3,25}$/.test(form.name.value)) {\r\n            const errorMsg: string = 'Le nom du pokémon est requis (1-25).';\r\n            const newField: Field = { value: form.name.value, error: errorMsg, isValid: false };\r\n            newForm = { ...newForm, ...{ name: newField } };\r\n        } else {\r\n            const newField: Field = { value: form.name.value, error: '', isValid: true };\r\n            newForm = { ...newForm, ...{ name: newField } };\r\n        }\r\n\r\n        // Validator hp\r\n        if (!/^[0-9]{1,3}$/.test(form.hp.value)) {\r\n            const errorMsg: string = 'Les points de vie du pokémon sont compris entre 0 et 999.';\r\n            const newField: Field = { value: form.hp.value, error: errorMsg, isValid: false };\r\n            newForm = { ...newForm, ...{ hp: newField } };\r\n        } else {\r\n            const newField: Field = { value: form.hp.value, error: '', isValid: true };\r\n            newForm = { ...newForm, ...{ hp: newField } };\r\n        }\r\n\r\n        // Validator cp\r\n        if (!/^[0-9]{1,2}$/.test(form.cp.value)) {\r\n            const errorMsg: string = 'Les dégâts du pokémon sont compris entre 0 et 99';\r\n            const newField: Field = { value: form.cp.value, error: errorMsg, isValid: false };\r\n            newForm = { ...newForm, ...{ cp: newField } };\r\n        } else {\r\n            const newField: Field = { value: form.cp.value, error: '', isValid: true };\r\n            newForm = { ...newForm, ...{ cp: newField } };\r\n        }\r\n\r\n        setForm(newForm);\r\n        return newForm.name.isValid && newForm.hp.isValid && newForm.cp.isValid;\r\n    }\r\n\r\n    const isTypesValid = (type: string): boolean => {\r\n        // Cas n°1: Le pokémon a un seul type, qui correspond au type passé en paramètre.\r\n        // Dans ce cas on revoie false, car l'utilisateur ne doit pas pouvoir décoché ce type (sinon le pokémon aurait 0 type, ce qui est interdit)\r\n        if (form.types.value.length === 1 && hasType(type)) {\r\n            return false;\r\n        }\r\n\r\n        // Cas n°1: Le pokémon a au moins 3 types.\r\n        // Dans ce cas il faut empêcher à l'utilisateur de cocher un nouveau type, mais pas de décocher les types existants.\r\n        if (form.types.value.length >= 3 && !hasType(type)) {\r\n            return false;\r\n        }\r\n\r\n        // Après avoir passé les deux tests ci-dessus, on renvoie 'true', \r\n        // c'est-à-dire que l'on autorise l'utilisateur à cocher ou décocher un nouveau type.\r\n        return true;\r\n    }\r\n\r\n    const deletePokemon = () => {\r\n        PokemonService.deletePokemon(pokemon).then(() => history.push('/pokemons'))\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={(e) => handleSubmit(e)}>\r\n            <div className=\"row\">\r\n                <div className=\"col s12 m8 offset-m2\">\r\n                    <div className=\"card hoverable\"> \r\n                            {isEditForm && \r\n                                <div className=\"card-image\">\r\n                                        <img src={pokemon.picture} alt={pokemon.name} style={{ width: '250px', margin: '0 auto' }} />\r\n                                        <span className=\"btn-floating halfway-fab waves-effect waves-light\">\r\n                                            <i onClick={deletePokemon} className=\"material-icons\">delete</i>\r\n                                        </span>\r\n                                </div>\r\n                            } \r\n                           \r\n                       \r\n                        <div className=\"card-stacked\">\r\n                            <div className=\"card-content\">\r\n                                {/* Pokemon picture */}\r\n                                {isAddForm() && <div className=\"form-group\">\r\n                                    <label htmlFor=\"picture\">Image</label>\r\n                                    <input name=\"picture\" id=\"picture\" type=\"text\" className=\"form-control\" value={form.picture.value}\r\n                                        onChange={(e) => handleForm(e)} ></input>\r\n                                    {form.picture.error && <div className='card-panel red accent-1'>\r\n                                        {form.picture.error}\r\n                                    </div>\r\n                                    }\r\n                                </div>}\r\n                               \r\n\r\n                                {/* Pokemon name */}\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"name\">Nom</label>\r\n                                    <input name=\"name\" id=\"name\" type=\"text\" className=\"form-control\" value={form.name.value}\r\n                                        onChange={(e) => handleForm(e)} ></input>\r\n                                    {form.name.error && <div className='card-panel red accent-1'>\r\n                                        {form.name.error}\r\n                                    </div>\r\n                                    }\r\n                                </div>\r\n\r\n                                {/* Pokemon hp */}\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"hp\">Point de vie</label>\r\n                                    <input name=\"hp\" id=\"hp\" type=\"number\" className=\"form-control\" value={form.hp.value} onChange={(e) => handleForm(e)}></input>\r\n                                    {form.hp.error && <div className='card-panel red accent-1'>\r\n                                        {form.hp.error}\r\n                                    </div>\r\n                                    }\r\n                                </div>\r\n                                {/* Pokemon cp */}\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"cp\">Dégâts</label>\r\n                                    <input name=\"cp\" id=\"cp\" type=\"number\" className=\"form-control\" value={form.cp.value} onChange={(e) => handleForm(e)}></input>\r\n                                    {form.cp.error && <div className='card-panel red accent-1'>\r\n                                        {form.cp.error}\r\n                                    </div>\r\n                                    }\r\n                                </div>\r\n                                {/* Pokemon types */}\r\n                                <div className=\"form-group\">\r\n                                    <label>Types</label>\r\n                                    {types.map(type => (\r\n                                        <div key={type} style={{ marginBottom: '10px' }}>\r\n                                            <label>\r\n                                                <input id={type} type=\"checkbox\" className=\"filled-in\" disabled={!isTypesValid(type)} checked={hasType(type)} onChange={\r\n                                                    (e) => selectType(type, e)\r\n                                                }></input>\r\n                                                <span>\r\n                                                    <p className={formatType(type)}>{type}</p>\r\n                                                </span>\r\n                                            </label>\r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"card-action center\">\r\n                                {/* Submit button */}\r\n                                <button type=\"submit\" className=\"btn\">Valider</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default PokemonForm;","export default class Pokemon {\r\n  // 1. Typage des propiétés d'un pokémon.\r\n  id: number;\r\n  hp: number;\r\n  cp: number;\r\n  name: string;\r\n  picture: string;\r\n  types: Array<string>;\r\n  created?: Date;\r\n\r\n  // 2. Définition des valeurs par défaut des propriétés d'un pokémon.\r\n  constructor(\r\n    id: number,\r\n    hp: number = 10,\r\n    cp: number = 10,\r\n    name: string = \"...\",\r\n    picture: string = \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/XXX.png\", \r\n    types: Array<string> = [\"Normal\"],\r\n    created: Date = new Date()\r\n  ) {\r\n    // 3. Initialisation des propiétés d'un pokémons.\r\n    this.id = id;\r\n    this.hp = hp;\r\n    this.cp = cp;\r\n    this.name = name;\r\n    this.picture = picture;\r\n    this.types = types;\r\n    this.created = created;\r\n  }\r\n}\r\n","import React, { FunctionComponent, useState } from \"react\";\r\nimport PokemonForm from \"../components/pokemon-form\";\r\nimport Pokemon from \"../models/pokemons\";\r\n\r\n\r\nconst PokemonAdd: FunctionComponent = ()=> {\r\n    const [id] = useState<number>(new Date().getTime());\r\n    const [pokemon] = useState<Pokemon>(new Pokemon(id));\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <h2 className=\"header center\">Ajouter un pokemon</h2>\r\n            <PokemonForm pokemon={pokemon} isEditForm={false} ></PokemonForm>\r\n        </div>\r\n    ) \r\n}\r\n\r\n\r\nexport default PokemonAdd;","\r\nimport React, { FunctionComponent } from 'react';\r\n\r\nconst Loader: FunctionComponent = () => { \r\n    return (\r\n        <div className=\"preloader-wrapper big active\">\r\n            <div className=\"spinner-layer spinner-blue\">\r\n                <div className=\"circle-clipper left\">\r\n                    <div className=\"circle\"></div>\r\n                </div>\r\n                <div className=\"gap-patch\">\r\n                    <div className=\"circle\"></div>\r\n                </div><div className=\"circle-clipper right\">\r\n                    <div className=\"circle\"></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Loader;","import React, { FunctionComponent, useState, useEffect } from 'react';\r\nimport { RouteComponentProps, Link } from 'react-router-dom';  \r\nimport Loader from '../components/loader';\r\nimport { formatDate, formatType } from '../helpers/formatSomthing';\r\nimport Pokemon from '../models/pokemons';\r\nimport PokemonService from '../services/pokemon-service';\r\n\r\ntype Params = { id: string };\r\n\r\nconst PokemonsDetail: FunctionComponent<RouteComponentProps<Params>> = ({ match }) => {\r\n\r\n    const [pokemon, setPokemon] = useState<Pokemon | null>(null);\r\n\r\n    useEffect(() => {\r\n        PokemonService.getPokemon(+match.params.id).then((pokemon) => setPokemon(pokemon));\r\n        /*fetch(`http://localhost:3001/pokemons/${match.params.id}`)\r\n            .then(response => response.json())\r\n            .then((pokemon) => {\r\n                //if(pokemon.id) setPokemon(pokemon) \r\n                 pokemon.id && setPokemon(pokemon)  \r\n            })*/\r\n        /*POKEMONS.forEach(pokemon => {\r\n            if (match.params.id === pokemon.id.toString()) {\r\n                setPokemon(pokemon);\r\n            }\r\n        })*/\r\n    }, [match.params.id]);\r\n\r\n    return (\r\n        <div>\r\n            {pokemon ? (\r\n                <div className=\"row\">\r\n                    <div className=\"col s12 m8 offset-m2\">\r\n                        <h2 className=\"header center\">{pokemon.name}</h2>\r\n                        <div className=\"card hoverable\">\r\n                            <div className=\"card-image\">\r\n                                <img src={pokemon.picture} alt={pokemon.name} style={{ width: '250px', margin: '0 auto' }} />\r\n                                <Link to={`/pokemon/edit/${pokemon.id}`} className=\"btn btn-floating halfway-fab waves-effect waves-light\">\r\n                                    <i className='material-icons'>edit</i>\r\n                                </Link> \r\n                            </div>\r\n                            <div className=\"card-stacked\">\r\n                                <div className=\"card-content\">\r\n                                    <table className=\"bordered striped\">\r\n                                        <tbody>\r\n                                            <tr>\r\n                                                <td>Nom</td>\r\n                                                <td><strong>{pokemon.name}</strong></td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>Points de vie</td>\r\n                                                <td><strong>{pokemon.hp}</strong></td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>Dégâts</td>\r\n                                                <td><strong>{pokemon.cp}</strong></td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>Types</td>\r\n                                                <td>\r\n                                                    {pokemon.types.map((type) => (\r\n                                                        <span key={type} className={formatType(type)}>{type}</span>\r\n                                                    ))}</td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>Date de création</td>\r\n                                                <td>{formatDate(pokemon?.created)}</td>\r\n                                            </tr>\r\n                                        </tbody>\r\n                                    </table>\r\n                                </div>\r\n                                <div className=\"card-action\">\r\n                                    <Link to=\"/\">Retour</Link>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            ) : (\r\n                <h4 className=\"center\"><Loader></Loader></h4>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PokemonsDetail;\r\n","import React, { FunctionComponent, useState, useEffect } from 'react';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport Loader from '../components/loader';\r\nimport PokemonForm from '../components/pokemon-form';  \r\nimport Pokemon from '../models/pokemons';\r\nimport PokemonService from '../services/pokemon-service';\r\n\r\ntype Params = { id: string };\r\n\r\nconst PokemonEdit: FunctionComponent<RouteComponentProps<Params>> = ({ match }) => {\r\n\r\n    const [pokemon, setPokemon] = useState<Pokemon | null>(null);\r\n\r\n    useEffect(() => {\r\n        PokemonService.getPokemon(+match.params.id).then((pokemon) => setPokemon(pokemon));\r\n        /*fetch(`http://localhost:3001/pokemons/${match.params.id}`)\r\n            .then(response => response.json())\r\n            .then((pokemon) => {\r\n                if(pokemon.id) setPokemon(pokemon);\r\n            });*/\r\n        /*POKEMONS.forEach(pokemon => {\r\n            if (match.params.id === pokemon.id.toString()) {\r\n                setPokemon(pokemon);\r\n            }\r\n        })*/\r\n    }, [match.params.id]);\r\n\r\n    return (\r\n        <div>\r\n            {pokemon ? (\r\n                <div className=\"row\">\r\n                    <h2 className=\"header center\">Éditer {pokemon.name}</h2>\r\n                    <PokemonForm pokemon={pokemon} isEditForm={true}></PokemonForm>\r\n                </div>\r\n            ) : (\r\n                    <h4 className=\"center\"><Loader></Loader></h4>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PokemonEdit;","import React, { useState } from 'react';\r\nimport Pokemon from '../models/pokemons';\r\nimport { formatDate, formatType } from '../helpers/formatSomthing';\r\nimport \"./pokemon-card.css\"\r\nimport { useHistory } from 'react-router-dom';\r\n\r\ntype Props = {\r\n    pokemon: Pokemon, \r\n    borderColor?: string \r\n}\r\nconst PokemonCard: React.FC<Props> = ({pokemon, borderColor=\"#009688\"}) => { \r\n    const [color, setColor] = useState<string>();\r\n    const history = useHistory();\r\n \r\n    const showBorder = () => {\r\n        setColor(borderColor)\r\n    }\r\n    const hideBorder = () => {\r\n        setColor(\"#f5f5f5\")\r\n    } \r\n\r\n    const onToPokemon = (id:number) => {\r\n        history.push(`/pokemon/${id}`);\r\n    } \r\n    return (\r\n        <div className=\"col s6 m4\" key={pokemon.id} onMouseEnter={showBorder} onMouseLeave={hideBorder} onClick={() => onToPokemon(pokemon.id)}>\r\n            <div className=\"card horizontal\" style={{ borderColor: color }} > \r\n                <div className=\"card-image\">\r\n                    <img src={pokemon.picture} alt={pokemon.name} />\r\n                </div>\r\n                <div className=\"card-stacked\">\r\n                    <div className=\"card-container\" key={pokemon.id}>\r\n                        <p>{pokemon.name}</p> \r\n                        <p><small>{formatDate(pokemon?.created)}</small></p>\r\n                        {pokemon.types.map((type) => (\r\n                            <span key={type} className={formatType(type)}>{type}</span>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div> \r\n    )\r\n}\r\n\r\nexport default PokemonCard;","import React, { FunctionComponent, useState } from 'react';\r\nimport { Link } from 'react-router-dom'; \r\nimport Pokemon from '../models/pokemons';\r\nimport PokemonService from '../services/pokemon-service';\r\n\r\nconst PokemonSearch: FunctionComponent = () => { \r\n    const [term, setTerm] = useState<string>('');\r\n    const [pokemons, setPokemons] = useState<Pokemon[]>([]);\r\n\r\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n        const term = e.target.value;\r\n        setTerm(term);\r\n\r\n        if (term.length <= 1) {\r\n            setPokemons([]);\r\n            return;\r\n        }\r\n\r\n        PokemonService.searchPokemon(term).then(pokemons => setPokemons(pokemons));\r\n    }\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"col s12 m6 offset-m3\">\r\n                <div className=\"card\">\r\n                    <div className=\"card-content\">\r\n                        <div className=\"input-field\">\r\n                            <input type=\"text\" placeholder=\"Rechercher un pokémon\" value={term} onChange={e => handleInputChange(e)} />\r\n                        </div>\r\n                        <div className='collection'>\r\n                            {pokemons.map((pokemon) => (\r\n                                <Link key={pokemon.id} to={`/pokemon/${pokemon.id}`} className=\"collection-item\">\r\n                                    {pokemon.name}\r\n                                </Link>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PokemonSearch;","import React , {FunctionComponent, useEffect, useState} from 'react';   \r\nimport { Link } from 'react-router-dom';\r\nimport PokemonCard from '../components/pokemon-card'; \r\nimport PokemonSearch from '../components/pokemon-search';\r\nimport Pokemon from '../models/pokemons';\r\nimport PokemonService from '../services/pokemon-service';\r\n\r\n\r\nconst PokemonList: FunctionComponent = () => { \r\n  //const pokemons = usePokemons();\r\n  const [pokemons, setPokemons] = useState<Pokemon[]>([]);\r\n\r\n    useEffect(() => {\r\n      PokemonService.getPokemons().then((pokemons) => setPokemons(pokemons));\r\n      /*fetch(\"http://localhost:3001/pokemons\")\r\n        .then(response => response.json())\r\n        .then((pokemons) => setPokemons(pokemons))*/\r\n      //setPokemons(POKEMONS)\r\n    }, []); \r\n\r\n  return (\r\n    <div>\r\n      <h1 className='center'>Pokedex</h1>\r\n      <div className='container'>\r\n        <div className='row'>\r\n          <PokemonSearch></PokemonSearch>\r\n          {pokemons.map((pokemon) => (\r\n            <PokemonCard key={pokemon.id} pokemon={pokemon}  />\r\n          ))}\r\n        </div>\r\n      </div>\r\n      <Link className=\"btn-floating btn-large waves-effect waves-light red z-depth-3\"\r\n      style={{position:'fixed', bottom:'25px', right:'25px'}} to=\"/pokemon/add\">\r\n        <i className=\"material-icons\">add</i>\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PokemonList","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport AuthenticationService from  './services/authentication-service';\r\n\r\n// rest = { exact : true, path : \"/\"}\r\nconst PrivateRoute = ({ component: Component, ...rest }: any) => (\r\n    <Route {...rest} render={(props) => {\r\n        const isAuthenticated = AuthenticationService.isAuthenticated;\r\n        if (!isAuthenticated) {\r\n            return <Redirect to={{ pathname: '/login' }} />\r\n        }\r\n\r\n        return <Component {...props} />\r\n    }} />\r\n);\r\n\r\nexport default PrivateRoute;","import React, { FunctionComponent }  from 'react';  \r\nimport { Link, BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport Login from './pages/login';\r\nimport PageNotFound from './pages/page-not-found';\r\nimport PokemonAdd from './pages/pokemon-add';\r\nimport PokemonsDetail from './pages/pokemon-detail';\r\nimport PokemonEdit from './pages/pokemon-edit';\r\nimport PokemonList from './pages/Pokemon-list';\r\nimport PrivateRoute from './PrivateRoute';\r\n \r\nconst App: FunctionComponent = () => {   \r\n    return (\r\n        <Router>  \r\n            <div>\r\n                <nav>\r\n                    <div className='nav-wrapper teal'>\r\n                        <Link to=\"/\" className=\"brand-logo center\">Pokedes</Link> \r\n                    </div>\r\n                </nav>\r\n                <Switch>\r\n                    <PrivateRoute exact path=\"/\" component={PokemonList} />\r\n                    <PrivateRoute exact path=\"/pokemons\" component={PokemonList} />\r\n                    <Route exact path=\"/login\" component={Login} />\r\n                    <PrivateRoute exact path=\"/pokemon/add\" component={PokemonAdd} /> \r\n                    <PrivateRoute path=\"/pokemon/edit/:id\" component={PokemonEdit} /> \r\n                    <PrivateRoute path=\"/pokemon/:id\" component={PokemonsDetail} /> \r\n                    <Route component={PageNotFound} />  \r\n                </Switch>\r\n            </div> \r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDom from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDom.render(\r\n    <App />,\r\n    document.getElementById('root')\r\n)"],"sourceRoot":""}